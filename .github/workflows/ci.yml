name: CI - Tests y Cobertura

# Triggers: cuando hay push a development o PR hacia main
on:
  push:
    branches: [ development ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Tests Unitarios y Cobertura
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
    
    - name: 📋 Información del Commit y Contexto
      run: |
        echo "🚀 === INFORMACIÓN DEL WORKFLOW ==="
        echo "📅 Fecha y hora: $(date)"
        echo "🏃 Runner: ${{ runner.os }} - ${{ runner.arch }}"
        echo "🐍 Python version: ${{ matrix.python-version }}"
        echo ""
        echo "📝 === INFORMACIÓN DEL COMMIT ==="
        echo "👤 Autor: ${{ github.actor }}"
        echo "📧 Email del commit: ${{ github.event.head_commit.author.email }}"
        echo "🆔 SHA del commit: ${{ github.sha }}"
        echo "🔗 SHA corto: ${{ github.sha }}" | cut -c1-8
        echo "💬 Mensaje: ${{ github.event.head_commit.message }}"
        echo "🌿 Rama: ${{ github.ref_name }}"
        echo "📦 Repositorio: ${{ github.repository }}"
        echo ""
        echo "🔄 === INFORMACIÓN DEL EVENTO ==="
        echo "🎯 Evento: ${{ github.event_name }}"
        echo "🔢 Número de ejecución: ${{ github.run_number }}"
        echo "🆔 ID de ejecución: ${{ github.run_id }}"
        echo "🔄 Intento: ${{ github.run_attempt }}"
        echo ""
        echo "🔗 === ENLACES ÚTILES ==="
        echo "📊 Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo "📝 Commit: ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"
        echo ""
        echo "🌍 === VARIABLES DE ENTORNO ==="
        echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
        echo "GITHUB_ACTION: $GITHUB_ACTION"
        echo "GITHUB_WORKFLOW: $GITHUB_WORKFLOW"
    
    - name: Configurar Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencias pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Instalar dependencias
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage
    
    - name: Ejecutar linting con flake8
      run: |
        # Detener el build si hay errores de sintaxis o nombres indefinidos
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Advertencias por complejidad y estilo (no detiene el build)
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Ejecutar tests con cobertura
      run: |
        coverage run -m unittest discover -s . -p "test_*.py" -v
        coverage report -m
        coverage xml
    
    - name: Subir cobertura a Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Generar reporte HTML de cobertura
      run: |
        coverage html
    
    - name: Subir artefactos de cobertura
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/
        retention-days: 30
    
    - name: Verificar cobertura mínima
      run: |
        coverage report --fail-under=90
    
    - name: 📊 Resumen Final del CI
      if: always()
      run: |
        echo "✅ === RESUMEN DE EJECUCIÓN ==="
        echo "🐍 Python ${{ matrix.python-version }} - Completado"
        echo "👤 Ejecutado por: ${{ github.actor }}"
        echo "🆔 Commit: ${{ github.sha }}" | cut -c1-8
        echo "🌿 Rama: ${{ github.ref_name }}"
        echo "⏱️ Workflow: ${{ github.workflow }}"
        echo "🔢 Ejecución #${{ github.run_number }}"
        echo ""
        if [ "${{ job.status }}" == "success" ]; then
          echo "🎉 Estado: ÉXITO ✅"
        else
          echo "❌ Estado: FALLO ❌"
        fi
        echo ""
        echo "📈 Próximos pasos:"
        echo "- Revisar artefactos de cobertura"
        echo "- Verificar reportes de Codecov"
        echo "- Continuar con el desarrollo"