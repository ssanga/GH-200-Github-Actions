# Pipeline por Entorno: Staging
# Workflow espec√≠fico para el entorno de staging/pre-producci√≥n
# Trigger: Push a rama 'staging' o workflow_dispatch

name: üéÜ Deploy to Staging

# Triggers espec√≠ficos para staging
on:
  push:
    branches:
      - staging
      - stage
      - pre-production
  
  # Trigger manual para validaci√≥n
  workflow_dispatch:
    inputs:
      run_performance_tests:
        description: 'Ejecutar tests de rendimiento'
        required: false
        default: true
        type: boolean
      notify_team:
        description: 'Notificar al equipo'
        required: false
        default: true
        type: boolean

# Variables espec√≠ficas del entorno Staging
env:
  ENVIRONMENT: 'staging'
  NODE_ENV: 'staging'
  PYTHON_VERSION: '3.9'
  DEBUG: 'false'
  LOG_LEVEL: 'info'
  
  # URLs espec√≠ficas de staging
  API_URL: 'https://staging-api.calculadora.example.com'
  WEB_URL: 'https://staging.calculadora.example.com'
  DATABASE_URL: 'postgresql://staging-db.example.com/calculadora_staging'
  
  # Configuraciones de staging (m√°s restrictivas que dev)
  CACHE_TTL: '300'  # 5 minutos
  RATE_LIMIT: '500'  # L√≠mite medio
  SSL_REQUIRED: 'true'
  
jobs:
  # ===============================================
  # JOB 1: BUILD Y VALIDACI√ìN PARA STAGING
  # ===============================================
  build-staging:
    name: üèóÔ∏è Build for Staging
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        
      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
          # Instalar herramientas de testing y calidad
          pip install pytest pytest-cov pytest-benchmark black flake8 bandit safety
          
      - name: üîí Security and dependency check
        run: |
          echo "üîí Ejecutando checks de seguridad para staging..."
          
          # Check de vulnerabilidades en dependencias
          echo "  ‚ñ∂ Verificando vulnerabilidades en dependencias..."
          safety check --json || echo "‚ö†Ô∏è Vulnerabilidades encontradas (revisar)"
          
          # An√°lisis de seguridad del c√≥digo
          echo "  ‚ñ∂ An√°lisis de seguridad del c√≥digo..."
          bandit -r . -f json -o bandit-report.json || true
          cat bandit-report.json | head -50
          
      - name: üß† Code quality enforcement (Staging)
        run: |
          echo "üß† Aplicando est√°ndares de calidad para staging..."
          
          # Formateo obligatorio
          echo "  ‚ñ∂ Verificando formato con black (OBLIGATORIO)..."
          black --check calculadora.py test_calculadora.py
          
          # Linting estricto
          echo "  ‚ñ∂ Linting estricto con flake8..."
          flake8 calculadora.py test_calculadora.py --max-line-length=88 --max-complexity=10
          
          echo "‚úÖ Est√°ndares de calidad aplicados"
          
      - name: üß™ Tests completos (Staging)
        run: |
          echo "üß™ Ejecutando suite completa de tests para staging..."
          
          # Tests unitarios con coverage estricto
          pytest test_calculadora.py -v \
            --cov=calculadora \
            --cov-report=term-missing \
            --cov-report=html \
            --cov-fail-under=90
          
          echo "‚úÖ Tests de staging completados"
          
      - name: üìä Performance tests
        if: ${{ inputs.run_performance_tests != false }}
        run: |
          echo "üìä Ejecutando tests de rendimiento..."
          
          # Tests de rendimiento b√°sicos
          python -c "
          import time
          from calculadora import Calculadora
          
          calc = Calculadora()
          
          # Test de rendimiento simple
          start_time = time.time()
          for i in range(10000):
              calc.sumar(i, i+1)
              calc.multiplicar(i, 2)
          end_time = time.time()
          
          duration = end_time - start_time
          print(f'üìä Rendimiento: 20,000 operaciones en {duration:.3f}s')
          
          if duration > 1.0:
              print('‚ö†Ô∏è  Performance warning: Operaciones lentas')
          else:
              print('‚úÖ Performance: OK')
          "
          
      - name: üèóÔ∏è Generate staging build
        run: |
          echo "üèóÔ∏è Generando build para staging..."
          
          mkdir -p dist-staging
          
          # Crear configuraci√≥n espec√≠fica de staging
          cat > dist-staging/config.py << 'EOF'
          # Configuraci√≥n espec√≠fica de Staging
          import os
          
          class StagingConfig:
              DEBUG = False
              TESTING = True  # Ambiente de testing
              LOG_LEVEL = 'INFO'
              
              # URLs de staging
              API_URL = '${{ env.API_URL }}'
              WEB_URL = '${{ env.WEB_URL }}'
              DATABASE_URL = '${{ env.DATABASE_URL }}'
              
              # Configuraciones de staging
              CACHE_TTL = ${{ env.CACHE_TTL }}
              RATE_LIMIT = ${{ env.RATE_LIMIT }}
              SSL_REQUIRED = ${{ env.SSL_REQUIRED }}
              
              # Configuraciones de seguridad para staging
              SECURE_COOKIES = True
              SESSION_TIMEOUT = 3600  # 1 hora
              MAX_CONTENT_LENGTH = 16 * 1024 * 1024  # 16MB
              
              # Feature flags para staging
              ENABLE_MONITORING = True
              ENABLE_METRICS = True
              ALLOW_CORS = False  # M√°s restrictivo que dev
              
          config = StagingConfig()
          EOF
          
          # Copiar archivos de aplicaci√≥n
          cp calculadora.py dist-staging/
          cp requirements.txt dist-staging/
          
          # Crear archivo de informaci√≥n de build con m√°s detalles
          cat > dist-staging/build-info.json << EOF
          {
            "environment": "${{ env.ENVIRONMENT }}",
            "branch": "${{ github.ref_name }}",
            "commit": "${{ github.sha }}",
            "build_time": "$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")",
            "build_number": "${{ github.run_number }}",
            "version": "staging-${{ github.run_number }}",
            "urls": {
              "api": "${{ env.API_URL }}",
              "web": "${{ env.WEB_URL }}"
            },
            "security": {
              "ssl_required": ${{ env.SSL_REQUIRED }},
              "rate_limit": ${{ env.RATE_LIMIT }}
            },
            "quality_checks": {
              "code_format": "passed",
              "linting": "passed",
              "security_scan": "completed",
              "coverage": ">=90%"
            }
          }
          EOF
          
      - name: üì§ Upload staging artifact
        uses: actions/upload-artifact@v4
        with:
          name: calculadora-staging-${{ github.run_number }}
          path: dist-staging/
          retention-days: 14  # Retenci√≥n media para staging
          
    outputs:
      artifact-name: calculadora-staging-${{ github.run_number }}
      build-url: ${{ env.WEB_URL }}
      
  # ===============================================
  # JOB 2: DEPLOY AL ENTORNO DE STAGING
  # ===============================================
  deploy-staging:
    name: üöÄ Deploy to Staging Environment
    runs-on: ubuntu-latest
    needs: build-staging
    environment:
      name: staging
      url: ${{ env.WEB_URL }}
    
    steps:
      - name: üì• Download staging artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-staging.outputs.artifact-name }}
          path: ./deploy-staging
          
      - name: üîç Verify staging artifact
        run: |
          echo "üîç Verificando artifact de staging..."
          ls -la ./deploy-staging
          
          echo "üìÑ Build info detallada:"
          cat ./deploy-staging/build-info.json | jq .
          
          echo "‚öôÔ∏è Configuraci√≥n de staging:"
          head -30 ./deploy-staging/config.py
          
      - name: üèóÔ∏è Setup staging environment
        run: |
          echo "üèóÔ∏è Configurando entorno de staging..."
          
          # Configuraci√≥n m√°s robusta para staging
          echo "  ‚ñ∂ Configurando variables de entorno seguras..."
          echo "ENVIRONMENT=${{ env.ENVIRONMENT }}" >> $GITHUB_ENV
          echo "DEBUG=${{ env.DEBUG }}" >> $GITHUB_ENV
          echo "LOG_LEVEL=${{ env.LOG_LEVEL }}" >> $GITHUB_ENV
          echo "SSL_REQUIRED=${{ env.SSL_REQUIRED }}" >> $GITHUB_ENV
          
          echo "  ‚ñ∂ Preparando servicios de staging..."
          echo "    - Base de datos: ${{ env.DATABASE_URL }}"
          echo "    - API (SSL): ${{ env.API_URL }}"
          echo "    - Cache TTL: ${{ env.CACHE_TTL }}s"
          echo "    - Rate Limit: ${{ env.RATE_LIMIT }} req/min"
          
          echo "  ‚ñ∂ Validando conectividad de servicios..."
          # Simular health checks
          sleep 2
          
          echo "‚úÖ Entorno de staging configurado y validado"
          
      - name: üß™ Integration tests en staging
        run: |
          echo "üß™ Ejecutando integration tests en staging..."
          cd ./deploy-staging
          
          # Tests de integraci√≥n m√°s completos
          python -c "
          import sys, json
          sys.path.append('.')
          
          from calculadora import Calculadora
          from config import config
          
          # Verificar configuraci√≥n de staging
          print(f'üèóÔ∏è Entorno: {config.TESTING and \"STAGING\" or \"UNKNOWN\"}')
          print(f'üîí SSL: {config.SSL_REQUIRED}')
          print(f'üìä Rate Limit: {config.RATE_LIMIT}')
          print(f'‚è∞ Cache TTL: {config.CACHE_TTL}s')
          
          # Tests funcionales completos
          calc = Calculadora()
          
          test_cases = [
              (calc.sumar, [2, 3], 5),
              (calc.restar, [10, 4], 6),
              (calc.multiplicar, [3, 4], 12),
              (calc.dividir, [15, 3], 5.0),
              (calc.potencia, [2, 3], 8),
              (calc.raiz_cuadrada, [16], 4.0)
          ]
          
          for func, args, expected in test_cases:
              result = func(*args)
              assert result == expected, f'Test failed: {func.__name__}{args} = {result}, expected {expected}'
              print(f'‚úÖ {func.__name__}{args} = {result}')
          
          # Test de casos l√≠mite
          try:
              calc.dividir(1, 0)
              assert False, 'Divisi√≥n por cero deber√≠a fallar'
          except ValueError:
              print('‚úÖ Control de divisi√≥n por cero: OK')
          
          try:
              calc.raiz_cuadrada(-1)
              assert False, 'Ra√≠z de negativo deber√≠a fallar'
          except ValueError:
              print('‚úÖ Control de ra√≠z negativa: OK')
          
          print('‚úÖ Integration tests de staging completados')
          "
          
      - name: üöÄ Deploy to Staging
        run: |
          echo "üöÄ Desplegando en entorno de STAGING..."
          
          # Deployment con blue-green simulation para staging
          echo "  üìà Staging deployment config:"
          echo "    - Environment: ${{ env.ENVIRONMENT }}"
          echo "    - SSL Required: ${{ env.SSL_REQUIRED }}"
          echo "    - URL: ${{ env.WEB_URL }}"
          echo "    - Build: ${{ needs.build-staging.outputs.artifact-name }}"
          
          # Deployment cuidadoso para staging
          echo "  ‚ñ∂ Creando backup de la versi√≥n actual..."
          sleep 2
          
          echo "  ‚ñ∂ Desplegando en blue environment..."
          sleep 3
          
          echo "  ‚ñ∂ Ejecutando health checks..."
          sleep 2
          
          echo "  ‚ñ∂ Switcheando tr√°fico a blue (staging)..."
          sleep 2
          
          echo "  ‚ñ∂ Validando deployment..."
          sleep 1
          
          echo "‚úÖ Deploy a staging completado"
          echo "üìä M√©tricas de deployment:"
          echo "  - Tiempo total: ~10 segundos"
          echo "  - Downtime: 0 segundos (blue-green)"
          echo "  - Health checks: Passed"
          echo "  - SSL: Enabled"
          
      - name: üìù Update staging status
        run: |
          echo "deployment_status=success" >> $GITHUB_OUTPUT
          echo "deployment_url=${{ env.WEB_URL }}" >> $GITHUB_OUTPUT
          echo "environment=staging" >> $GITHUB_OUTPUT
          
  # ===============================================
  # JOB 3: POST-DEPLOYMENT PARA STAGING
  # ===============================================
  post-deploy-staging:
    name: üìä Post-Deployment Staging
    runs-on: ubuntu-latest
    needs: [build-staging, deploy-staging]
    if: always()
    
    steps:
      - name: üìä Staging metrics and monitoring
        run: |
          echo "üìä M√©tricas del deployment de staging:"
          echo "  üèóÔ∏è Environment: staging"
          echo "  üåø Branch: ${{ github.ref_name }}"
          echo "  üì¶ Artifact: ${{ needs.build-staging.outputs.artifact-name }}"
          echo "  üîó URL: ${{ needs.build-staging.outputs.build-url }}"
          echo "  ‚è±Ô∏è Deploy time: $(date '+%H:%M:%S')"
          echo "  üìä Status: ${{ needs.deploy-staging.result }}"
          echo "  üîí Security: SSL enabled, Rate limited"
          
          # Simular env√≠o de m√©tricas
          echo "  üìä Enviando m√©tricas a sistema de monitoreo..."
          echo "    - Response time: 150ms"
          echo "    - Memory usage: 45MB"
          echo "    - CPU usage: 15%"
          
      - name: üìß Team notification
        if: ${{ inputs.notify_team != false }}
        run: |
          if [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
            echo "‚úÖ üìß STAGING - Deploy exitoso - Listo para QA"
            echo "  üîó URL: ${{ needs.build-staging.outputs.build-url }}"
            echo "  üåø Branch: ${{ github.ref_name }}"
            echo "  üë§ Deployer: ${{ github.actor }}"
            echo "  üß™ Tests: Integration tests passed"
            echo "  üîí Security: SSL enabled, Security scans completed"
            echo "  üìä Coverage: >=90%"
            echo ""
            echo "  üì¢ @QATeam - Staging lista para validaci√≥n"
          else
            echo "‚ùå üìß STAGING - Deploy fall√≥"
            echo "  üåø Branch: ${{ github.ref_name }}"
            echo "  üë§ Deployer: ${{ github.actor }}"
            echo "  üîó Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            echo ""
            echo "  üì¢ @DevTeam - Revisar logs de staging"
          fi
          
          # En un entorno real: notificaci√≥n a Slack/Teams para QA team
          echo "üìß Notificaci√≥n de staging enviada al equipo"
          
      - name: üßπ Staging cleanup and monitoring setup
        run: |
          echo "üßπ Configuraci√≥n de monitoreo y limpieza de staging:"
          echo "  - Artifacts: Retenci√≥n 14 d√≠as"
          echo "  - Logs: Nivel INFO configurado"
          echo "  - Monitoring: M√©tricas activadas"
          echo "  - Alerts: Configuradas para errores"
          echo "  - Health checks: Cada 5 minutos"
          echo "‚úÖ Staging configurado para monitoreo continuo"
